순환예시
---------------------------------------------------------------------------------------------------
팩토리얼
public static int factorial(int n) {
        if (n <= 1) return 1; <------------ 순환을 멈추는 부분
        else return n * factorial(n - 1); <----------- 순환을 호출하는 부분
}
---------------------------------------------------------------------------------------------------
거듭제곱
public static int power(int x,int n) {
        if (n == 0 ) return 1;
        else if((n%2) == 0) {
            return power(x*x,n/2);
        }
         else return x*power(x*x,n/2);
    }
---------------------------------------------------------------------------------------------------
피보나치
public static int fib(int n) {
        if (n == 0 ) return 0;
        if((n==1) ) {
            return 1;
        }
        else return fib(n-1) +fib(n-2);
    }
}       순환

public class Fibonacci {
    public int fibonacci(int n) {
        if(n==0) return 0;
        if(n==1) return 1;

        int pp = 0, p = 1, result = 0;
        for (int i = 2; i <= n; i++) {
            result = p + pp;
            pp = p;
            p = result;
        }
        return result;
    }
}       반복

순환과 반복으로 두개로 나눈 이유는 서로 장단점이 있기 때문에

순환
장점 - 이해하기 쉬움 ,수학적으로 가까운 형태로 문제 풀기 가능 ( 근데 이게 장점인가?)
단점 - 반복에 비해 시간이 오래 걸리고 오버플로우 발생 가능성 있음

반복
장점 - 시간이 짧음 오버플로우가 없어 메모리 효율성 증가
단점 - 직관적으로 보기 힘듥 , 즉 코드가 길어짐
----------------------------------------------------------------------------------------
public class TowerOfHanoi {
    public void hanoi(int n, char from, char tmp, char tmp) {
        if (n == 1) System.out.printf("원판 1을 %c에서 %c로 옮긴다.\n",from,to);

        hanoi(n - 1, from, to, tmp);
        System.out.printf("원판 %d을 %c에서 %c로 옮긴다.\n",n,from,to);
        hanoi(n - 1, tmp, from, to);
    }
------------------------------------------------------------------------------------------
순환 유리 방법 - 팩토리얼,피보나치,이항계수,이진 트리, 이진탐색, 하노이 탑




